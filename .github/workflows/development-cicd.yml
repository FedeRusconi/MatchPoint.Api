name: Development CI/CD Pipeline

on:
  push:
    branches:
      - development
  pull_request:
    branches:
      - development

jobs:
  test:
    runs-on: ubuntu-latest
    environment: Development
    env:
      # Map GitHub Secrets and environment variables
      CosmosDb:Url: ${{ vars.COSMOSDB_URL }}
      CosmosDb:Key: ${{ secrets.COSMOSDB_KEY }}
      CosmosDb:DatabaseName:  ${{ vars.COSMOSDB_DATABASE_NAME }}
      AzureAdB2C:TenantId: ${{ vars.AZUREADB2C_TENANT_ID }}
      AzureAdB2C:Domain: ${{ vars.AZUREADB2C_DOMAIN }}
      AzureAdB2C:ClientId: ${{ vars.AZUREADB2C_CLIENT_ID }}
      AzureAdB2C:ClientSecret: ${{ secrets.AZUREADB2C_CLIENT_SECRET }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Run tests for changed projects
        run: |

          # Get the list of changed files between the current and previous commits
          CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

          # Filter the changed test projects (those that end with .Tests.Unit and .Tests.Integration)
          UNIT_TEST_PROJECTS=$(echo "$CHANGED_FILES" | grep "\.Tests\.Unit")
          INTEGRATION_TEST_PROJECTS=$(echo "$CHANGED_FILES" | grep "\.Tests\.Integration")

          # If no changed test projects, skip testing
          if [ -z "$UNIT_TEST_PROJECTS" ] && [ -z "$INTEGRATION_TEST_PROJECTS" ]; then
            echo "No test projects changed. Skipping tests."
            exit 0
          fi

          # Output for debugging purposes
          echo "Changed Unit Test Projects: $UNIT_TEST_PROJECTS"
          echo "Changed Integration Test Projects: $INTEGRATION_TEST_PROJECTS"
          
          # Run tests for the changed projects
          if [ ! -z "$UNIT_TEST_PROJECTS" ]; then
            for test_project in $UNIT_TEST_PROJECTS; do
              echo "Running unit tests for $test_project"
              dotnet test $test_project --no-build --configuration Release --filter Category=Unit
            done
          fi

          if [ ! -z "$INTEGRATION_TEST_PROJECTS" ]; then
            for test_project in $INTEGRATION_TEST_PROJECTS; do
              echo "Running integration tests for $test_project"
              dotnet test $test_project --no-build --configuration Release --filter Category=Integration
            done
          fi